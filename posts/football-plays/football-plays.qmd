---
title: "Analyze football plays"
format:
  html:
    code-fold: false
jupyter: python3
---

# Introduction
I want to import football play data from a comma-separated values file and store it as a matrix represented as a list of lists.

# Import dependencies
```{python}
# Import data from a comma separated values file
import csv
# Calculate statistics
import statistics
# Represent data as tables
import pandas
# Visualize and interact with tables
import itables
itables.init_notebook_mode(all_interactive=True)
```

# Functions
```{python}
def read_comma_separated_values_as_matrix(filename: str):
    """Read a comma separated values file into a matrix represented as a list of lists.

    Arguments:
        filename (str): The name of the comma separated values file to import.
    Returns:
        (list): This list of lists contains the data from the comma separated values file.
    """
    with open(filename, 'rt') as file_handle:
        # Reference: https://stackoverflow.com/questions/30076209/import-csv-file-into-a-matrix-array-in-python
        reader = csv.reader(file_handle)
        data_as_list_of_lists = list(reader)
        return data_as_list_of_lists     
```

```{python}
def cast_list_values_as_floats(this_list: list):
    """Try to convert a list of arbitrary values to floats.

    Arguments:
        this_list (list): A list of values.
    Returns
        (list): A list of floats.
    """
    try:
        float_values = [float(value) for value in this_list]
    except:
        float_values = []
    return float_values
```

```{python}
def calculate_summary_statistics(this_list: list):
    """Calculate summary statistics for a list of quantitative data.

    Arguments:
        this_list (list): A list of quantitative values.
    Returns:
        (dict): A dictionary of name summary statistics.
    """
    summary_statistics = {
        "name": 0,
        "mean": 0,
        "median": 0,
        "min": 0,
        "max": 0,
        "variance": 0,
        "standard-deviation": 0,
        "count": 0
    }
    # I store the name of the list as the first item in the list or the zero-index item.
    summary_statistics["name"] = this_list[0]

    # First I want to confirm that all the values in my list are quantitative. I will ignore the first element since that is the name of this list.
    this_list_floats = cast_list_values_as_floats(this_list[1:])

    # If my list lengths are uneven it indicates to me that not all of the values could be converted to floats and I will ignore this data.
    if len(this_list_floats) != len(this_list) - 1:
        return summary_statistics
    
    summary_statistics["mean"] = statistics.mean(this_list_floats)
    summary_statistics["median"] = statistics.median(this_list_floats)
    summary_statistics["min"] = min(this_list_floats)
    summary_statistics["max"] = max(this_list_floats)
    summary_statistics["variance"] = statistics.variance(this_list_floats)
    summary_statistics["standard-deviation"] = statistics.stdev(this_list_floats)
    summary_statistics["count"] = len(this_list_floats)
    return summary_statistics
```

```{python}
def transpose_matrix(this_matrix: list):
    """Transpose a matrix represented as a list of lists.

    Arguments:
        this_matrix (list): A matrix represented as a list of lists.
    Returns:
        (list): A transposed matrix.
    """
    return [list(this_list) for this_list in zip(*this_matrix)]
```
# Methods
## Organize my data as a column-oriented matrix
A matrix is a structure for organizing data into columns and rows. In Python I represent a matrix as a list of lists.

In the parlance of relational databases a row-oriented database is one where all of the dimensions of a particular thing are linked together. In this dataset each row in the comma separated values table corresponds to a single play in a football game. My data will initially be row-oriented because Python reads files line-by-line. This means that each list in my matrix will contain all of the metrics for one particular play.

This is not particularly useful for me because I want to identify patterns within each dimension of data and use those dimensions to make predictions. I want to transform my dataset to by column-oriented so that I can do that. A column-oriented database is one where all of the values of a particular metric are stored together which makes it easier to pick out only the metrics I am interested in and use statistics to measure them. Instead of each list in my matrix storing all the metrics for a particular play I will organize it so that each list stores all the vales for a particular metric such as `Yards`.

### Read the data into a row-oriented matrix
I will read the football plays data from the comma separated values file into a list of lists and then check the length of the outer list and the first inner list as a validation measure.
```{python}
football_plays_filename = "football-plays-2024.csv"
row_oriented_matrix = read_comma_separated_values_as_matrix(football_plays_filename)
print(f"This matrix contains ({len(row_oriented_matrix)}) rows and ({len(row_oriented_matrix[0])}) columns.")
```

### Transpose matrix so that it is column-oriented
```{python}
columnar_matrix = transpose_matrix(row_oriented_matrix)
print(f"This matrix contains ({len(columnar_matrix)}) columns and ({len(columnar_matrix[0])}) rows.")
```

## Get all of my column names
Now I want to validate that my data is organized as expected by getting the first item in all of my columns. I expect this to be the name of the column because I have not parsed out the names from the data.
```{python}
column_names = [column[0] for column in columnar_matrix]
pandas.DataFrame(column_names)
```

## Generate summary statistics for each column
```{python}
summary_statistics_list = [calculate_summary_statistics(column) for column in columnar_matrix]
len(summary_statistics_list)
```

### View the mean of every metric
I can display a [dictionary as a dataframe](https://stackoverflow.com/a/46577585) by putting square brackets around the variable name.
```{python}
metric_means = {summary['name']: summary['mean'] for summary in summary_statistics_list}
pandas.DataFrame([metric_means])
```


