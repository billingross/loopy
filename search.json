[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/football-plays/football-plays.html",
    "href": "posts/football-plays/football-plays.html",
    "title": "Analyze football plays",
    "section": "",
    "text": "I want to import football play data from a comma-separated values file and store it as a matrix represented as a list of lists."
  },
  {
    "objectID": "posts/football-plays/football-plays.html#organize-my-data-as-a-column-oriented-matrix",
    "href": "posts/football-plays/football-plays.html#organize-my-data-as-a-column-oriented-matrix",
    "title": "Analyze football plays",
    "section": "Organize my data as a column-oriented matrix",
    "text": "Organize my data as a column-oriented matrix\nA matrix is a structure for organizing data into columns and rows. In Python I represent a matrix as a list of lists.\nIn the parlance of relational databases a row-oriented database is one where all of the dimensions of a particular thing are linked together. In this dataset each row in the comma separated values table corresponds to a single play in a football game. My data will initially be row-oriented because Python reads files line-by-line. This means that each list in my matrix will contain all of the metrics for one particular play.\nThis is not particularly useful for me because I want to identify patterns within each dimension of data and use those dimensions to make predictions. I want to transform my dataset to by column-oriented so that I can do that. A column-oriented database is one where all of the values of a particular metric are stored together which makes it easier to pick out only the metrics I am interested in and use statistics to measure them. Instead of each list in my matrix storing all the metrics for a particular play I will organize it so that each list stores all the vales for a particular metric such as Yards.\n\nRead the data into a row-oriented matrix\nI will read the football plays data from the comma separated values file into a list of lists and then check the length of the outer list and the first inner list as a validation measure.\n\nfootball_plays_filename = \"football-plays-2024.csv\"\nrow_oriented_matrix = read_comma_separated_values_as_matrix(football_plays_filename)\nprint(f\"This matrix contains ({len(row_oriented_matrix)}) rows and ({len(row_oriented_matrix[0])}) columns.\")\n\nThis matrix contains (53284) rows and (45) columns.\n\n\n\n\nTranspose matrix so that it is column-oriented\n\ncolumnar_matrix = transpose_matrix(row_oriented_matrix)\nprint(f\"This matrix contains ({len(columnar_matrix)}) columns and ({len(columnar_matrix[0])}) rows.\")\n\nThis matrix contains (45) columns and (53284) rows."
  },
  {
    "objectID": "posts/football-plays/football-plays.html#get-all-of-my-column-names",
    "href": "posts/football-plays/football-plays.html#get-all-of-my-column-names",
    "title": "Analyze football plays",
    "section": "Get all of my column names",
    "text": "Get all of my column names\nNow I want to validate that my data is organized as expected by getting the first item in all of my columns. I expect this to be the name of the column because I have not parsed out the names from the data.\n\ncolumn_names = [column[0] for column in columnar_matrix]\npandas.DataFrame(column_names)\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.4.2 from the init_notebook_mode cell...\n    (need help?)"
  },
  {
    "objectID": "posts/football-plays/football-plays.html#generate-summary-statistics-for-each-column",
    "href": "posts/football-plays/football-plays.html#generate-summary-statistics-for-each-column",
    "title": "Analyze football plays",
    "section": "Generate summary statistics for each column",
    "text": "Generate summary statistics for each column\n\nsummary_statistics_list = [calculate_summary_statistics(column) for column in columnar_matrix]\nlen(summary_statistics_list)\n\n45\n\n\n\nView the mean of every metric\nI can display a dictionary as a dataframe by putting square brackets around the variable name.\n\nmetric_means = {summary['name']: summary['mean'] for summary in summary_statistics_list}\npandas.DataFrame([metric_means])\n\n\n\n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\n    Loading ITables v2.4.2 from the init_notebook_mode cell...\n    (need help?)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "loopy",
    "section": "",
    "text": "Analyze football plays\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]